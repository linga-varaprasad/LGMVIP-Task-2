# -*- coding: utf-8 -*-
"""stock Market Prediction And Forecasting Using Stacked LSTM. ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzp1l6OUwcj3LqNI8y51K4qGthXpP3Ew
"""

import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense
from sklearn.preprocessing import MinMaxScaler

import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/mwitiderrick/stockprice/master/NSE-TATAGLOBAL.csv')
data.head()

data.shape

data.info()

data['Date'] = pd.to_datetime(data['Date'])
data.index = data['Date']
data.drop('Date', axis=1, inplace=True)
data = data.sort_index(ascending=True, axis=0)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)
scaled_data

train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[0:train_size, :]
test_data = scaled_data[train_size:len(data), :]
train_data

import numpy as np
def create_dataset(dataset, look_back=1):
    X, Y = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i+look_back), :]
        X.append(a)
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)

look_back = 60
train_X, train_Y = create_dataset(train_data, look_back)
test_X, test_Y = create_dataset(test_data, look_back)

print('train_X shape:', train_X.shape)
print('train_Y shape:', train_Y.shape)

from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense
from keras.optimizers import adam

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(loss='mean_squared_error', optimizer='adam')

model.summary()

model.fit(train_X, train_Y, epochs=50, batch_size=64, verbose=1)

import tensorflow as tf
tf.__version__

train_predict = model.predict(train_X)
test_predict = model.predict(test_X)

train_predict = scaler.inverse_transform(train_predict)
train_Y = scaler.inverse_transform([train_Y])
test_predict = scaler.inverse_transform(test_predict)
test_Y = scaler.inverse_transform([test_Y])

train_rmse = np.sqrt(np.mean(np.power(train_predict - train_Y, 2)))
test_rmse = np.sqrt(np.mean(np.power(test_predict - test_Y, 2)))
print('Train RMSE:', train_rmse)
print('Test RMSE:', test_rmse)